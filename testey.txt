import gspread
from google.oauth2.service_account import Credentials
import datetime


SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
    ]

CREDS = Credentials.from_service_account_file('creds.json')
SCOPED_CREDS = CREDS.with_scopes(SCOPE)
GSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)
SHEET = GSPREAD_CLIENT.open('corner-shop')

"""
User login, gets username from staff member.
"""
username = input("Please enter your username: ")
print("Hello " + username)

"""
User login, gets username from staff member.
"""
username = input("Please enter your username: ")
print("Hello " + username)

def get_user_password():
    """ 
    Get users password to go forward to data input 
    """
    print("Password should be 6 digits long with NO spaces OR commas")
        
    data_int = input("Please enter your password: ")

get_user_password()

def get_sales_data():
    """ 
    Get sales data figures from user.
    Run a loop until a valid string of data is received from the user.
    Valid string is 6 numbers separated by commas.
    """
    
    while True:
        print("Please enter sales data from the last market.")
        print("Data should be six numbers, separated by commas.")
        print("Example: 10,20,30,40,50,60\n")

        data_str = input("Enter your data here:\n")

        sales_data = data_str.split(",")

        if validate_data(sales_data):
            print("Data is valid!")
        break

    return sales_data

def validate_data(values):
    """ 
    Check the sales data entered meets the following requirements,
    the try can convert convert values to integers, if not it will produce
    an error.  The same applies if there are'nt exactly 6 values entered
    """
    try:
        [int(value) for value in values]
        if len(values) != 6:
            raise ValueError(
                f"Exactly 6 values required, you provided {len(values)}"
            )
    except ValueError as e:
        print(f"Invalid data: {e}, please try again.\n")
        return False

    return True



  

  def update_worksheet(data, worksheet):
    """ 
    Takes the data input by user and saves it to the relavent worksheet.
    Prints message to the user to show data is being saved
    """
    print(f"Updating {worksheet} worksheet...\n")
    worksheet_to_update = SHEET.worksheet(worksheet)
    worksheet_to_update.append_row(data)
    print(f"{worksheet} worksheet updated successfully\n")